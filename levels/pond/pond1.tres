[gd_resource type="ShaderMaterial" load_steps=5 format=2]

[ext_resource path="res://levels/pond/Ice002_2K_Color.jpg" type="Texture" id=1]
[ext_resource path="res://levels/pond/Ice002_2K_Displacement.jpg" type="Texture" id=2]
[ext_resource path="res://levels/pond/Ice002_2K_Normal.jpg" type="Texture" id=3]

[sub_resource type="Shader" id=2]
code = " 
shader_type spatial;

uniform vec2 amplitude = vec2(0.02, 0.1);
uniform vec2 frequency = vec2(3.0, 2.5);
uniform vec2 time_factor = vec2(.10, .10);

uniform sampler2D texturemap : hint_albedo;
uniform vec2 texture_scale = vec2(1.0, 1.0);

uniform sampler2D uv_offset_texture : hint_black;
uniform vec2 uv_offset_scale = vec2(0.02, 0.02);
uniform float uv_offset_time_scale = 0.005;
uniform float uv_offset_amplitude = 0.2;

uniform sampler2D normalmap : hint_normal;
uniform float refraction = 0.05;

float height(vec2 pos, float time) {
	return (amplitude.x * sin(pos.x * frequency.x + time * time_factor.x)) + (amplitude.y * sin(pos.y * frequency.y + time * time_factor.y));
}

void vertex() {
	VERTEX.y += height(VERTEX.xz, TIME); // sample the height at the location of our vertex
	TANGENT = normalize(vec3(0.0, height(VERTEX.xz + vec2(0.0, 0.2), TIME) - height(VERTEX.xz + vec2(0.0, -0.2), TIME), 0.4));
	BINORMAL = normalize(vec3(0.4, height(VERTEX.xz + vec2(0.2, 0.0), TIME) - height(VERTEX.xz + vec2(-0.2, 0.0), TIME ), 0.0));
	NORMAL = cross(TANGENT, BINORMAL);
}

void fragment()
{
	vec2 base_uv_offset = UV*uv_offset_scale;
	base_uv_offset += TIME * uv_offset_time_scale;
	vec2 texture_based_offset = texture(uv_offset_texture, base_uv_offset).rg;
	texture_based_offset = texture_based_offset * 2.0 - 1.0;
	
	vec2 texture_uv = UV * texture_scale;
	texture_uv += uv_offset_amplitude * texture_based_offset;
	
	ALBEDO = texture(texturemap, UV*texture_uv).rgb;
	if (ALBEDO.r > 0.9 && ALBEDO.g > 0.9 && ALBEDO.b > 0.9)
	{
		ALPHA = 0.9;
	}
	else
	{
		ALPHA = 0.5;
	}
	
	METALLIC = 0.5;
	ROUGHNESS = 0.25;
	
	vec3 ref_normal = normalize(mix(NORMAL, TANGENT*NORMALMAP.x + BINORMAL*NORMALMAP.y + NORMAL*NORMALMAP.z, NORMALMAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV + ref_normal.xy * refraction;
	EMISSION += textureLod(SCREEN_TEXTURE, ref_ofs, ROUGHNESS * 8.0).rgb * (1.0 - ALPHA);
	ALBEDO *= ALPHA;
	ALPHA = 1.0;
}
"

[resource]
shader = SubResource( 2 )
shader_param/amplitude = Vector2( 0.02, 0.1 )
shader_param/frequency = Vector2( 3, 2.5 )
shader_param/time_factor = Vector2( 0.1, 0.1 )
shader_param/texture_scale = Vector2( 1, 1 )
shader_param/uv_offset_scale = Vector2( 0.02, 0.02 )
shader_param/uv_offset_time_scale = 0.005
shader_param/uv_offset_amplitude = 0.2
shader_param/refraction = 0.05
shader_param/texturemap = ExtResource( 1 )
shader_param/uv_offset_texture = ExtResource( 2 )
shader_param/normalmap = ExtResource( 3 )
